{"version":3,"sources":["scss/classes.js","App.js","serviceWorker.js","index.js"],"names":["appClasses","appStart","classNames","appBg","appInn","alertMsg","App","props","state","width","height","startApp","updateWindowDimensions","bind","window","addEventListener","this","removeEventListener","setState","innerWidth","innerHeight","console","log","className","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"iPAkBeA,G,MAfI,CACfC,SAAUC,IACN,cAEJC,MAAOD,IACH,aAEJE,OAAQF,IACJ,YAEJG,SAAUH,IACN,cCVaI,E,kDACnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,MAAO,EACPC,OAAQ,EACRL,SAAU,KACVM,UAAU,GAEZ,EAAKC,uBAAyB,EAAKA,uBAAuBC,KAA5B,gBARb,E,gEAYjBC,OAAOC,iBAAiB,SAAUC,KAAKJ,0B,6CAIvCE,OAAOG,oBAAoB,SAAUD,KAAKJ,0B,+CAI1CI,KAAKE,SAAS,CAAET,MAAOK,OAAOK,WAAYT,OAAQI,OAAOM,cACzDJ,KAAKE,SAAS,CACZP,UAAU,IAEZU,QAAQC,IAAI,GAAGN,KAAKR,MAAMG,UACvBG,OAAOM,YAAc,IACtBJ,KAAKR,MAAMH,SAAW,2CAEtBW,KAAKR,MAAMH,SAAW,O,+BAMxB,OACE,yBAAKkB,UAAWP,KAAKR,MAAMG,SAAUX,EAAWC,SAAWD,EAAWG,OAClE,yBAAKoB,UAAWvB,EAAWI,QAA3B,OACM,6BADN,yCAEwC,6BAFxC,QAGO,6BACJY,KAAKR,MAAMH,UACV,yBAAKkB,UAAWvB,EAAWK,UACxBW,KAAKR,MAAMH,gB,GA3CKmB,aCQbC,QACW,cAA7BX,OAAOY,SAASC,UAEe,UAA7Bb,OAAOY,SAASC,UAEhBb,OAAOY,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpB,QAAQoB,MAAMA,EAAMC,a","file":"static/js/main.da8a7ce2.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport './App.scss';\n\nconst appClasses = {\n    appStart: classNames(\n        'startTheme',\n    ),\n    appBg: classNames(\n        'mainTheme',\n    ),\n    appInn: classNames(\n        'innerBox',\n    ),\n    alertMsg: classNames(\n        'alertMsg',\n    ),\n}\n\nexport default appClasses;","import React, { Component } from 'react';\n\nimport appClasses from './scss/classes.js';\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { \n      width: 0, \n      height: 0, \n      alertMsg: null,\n      startApp: true,\n    };\n    this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\n  }\n  \n  componentDidMount() {\n    window.addEventListener('resize', this.updateWindowDimensions);\n  }\n  \n  componentWillUnmount() {\n    window.removeEventListener('resize', this.updateWindowDimensions);\n  }\n  \n  updateWindowDimensions() {\n    this.setState({ width: window.innerWidth, height: window.innerHeight });\n    this.setState({\n      startApp: false,\n    })\n    console.log('',this.state.startApp)\n    if(window.innerHeight < 400){\n      this.state.alertMsg = \"Window is too small. Aborting program...\";\n    }else{\n      this.state.alertMsg = null;\n    }\n  }\n\n\n  render() {\n    return (\n      <div className={this.state.startApp? appClasses.appStart : appClasses.appBg}>\n          <div className={appClasses.appInn}>\n            ACME<br/>\n            Advanced Compoter Intelligenced Colors<br/>\n            v.1.0<br/>\n            {this.state.alertMsg && (\n              <div className={appClasses.alertMsg}>\n                {this.state.alertMsg}\n              </div>\n            )}\n        </div>\n      </div>\n    );\n    }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}